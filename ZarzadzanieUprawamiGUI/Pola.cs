//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZarzadzanieUprawamiGUI
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;

    public partial class Pola
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Pola()
        {
            this.Uprawy = new HashSet<Uprawy>();
            this.predyspozycje = new Dictionary<string, double>();
        }

        public void inicjalizujPredyspozycje()
        {
            var rodzaj = (String)Gleby.rodzaj;
           
            switch (rodzaj)
            {
                case "Czarnoziemy":
                    Console.WriteLine("Czarnoziemy");
                    this.predyspozycje["Pszenica"] = 1.0;
                    this.predyspozycje["Kukurydza"] = 0.8;
                    this.predyspozycje["Burak"] = 0.9;
                    this.predyspozycje["Ziemniak"] = 0.7;
                    this.predyspozycje["Rzepak"] = 1.5;
                    this.predyspozycje["Zyto"] = 0.5;
                    this.predyspozycje["Jeczmien"] = 1.0;
                    this.predyspozycje["Cebula"] = 0.9;
                    this.predyspozycje["Pietruszka"] = 1;
                    this.predyspozycje["Marchew"] = 1;
                    break;
                case "Bielicowe":
                    Console.WriteLine("Bielicowe");
                    this.predyspozycje["Pszenica"] = 0.7;
                    this.predyspozycje["Kukurydza"] = 0.8;
                    this.predyspozycje["Burak"] = 1.0;
                    this.predyspozycje["Ziemniak"] = 0.6;
                    this.predyspozycje["Rzepak"] = 0.9;
                    this.predyspozycje["Zyto"] = 1;
                    this.predyspozycje["Jeczmien"] = 0.7;
                    this.predyspozycje["Cebula"] = 0.8;
                    this.predyspozycje["Pietruszka"] = 0.6;
                    this.predyspozycje["Marchew"] = 0.6;
                    break;
                case "Czarne":
                    Console.WriteLine("Czarne");
                    this.predyspozycje["Pszenica"] = 0.8;
                    this.predyspozycje["Kukurydza"] = 0.8;
                    this.predyspozycje["Burak"] = 0.8;
                    this.predyspozycje["Ziemniak"] = 1.2;
                    this.predyspozycje["Rzepak"] = 0.7;
                    this.predyspozycje["Zyto"] = 0.7;
                    this.predyspozycje["Jeczmien"] = 0.8;
                    this.predyspozycje["Cebula"] = 0.9;
                    this.predyspozycje["Pietruszka"] = 0.8;
                    this.predyspozycje["Marchew"] = 0.8;
                    break;
                case "Brunatne":
                    Console.WriteLine("Brunatne");
                    Console.WriteLine("Czarne");
                    this.predyspozycje["Pszenica"] = 0.7;
                    this.predyspozycje["Kukurydza"] = 0.7;
                    this.predyspozycje["Burak"] = 0.7;
                    this.predyspozycje["Ziemniak"] = 1.3;
                    this.predyspozycje["Rzepak"] = 0.8;
                    this.predyspozycje["Zyto"] = 0.8;
                    this.predyspozycje["Jeczmien"] = 0.6;
                    this.predyspozycje["Cebula"] = 0.65;
                    this.predyspozycje["Pietruszka"] = 0.75;
                    this.predyspozycje["Marchew"] = 0.75;
                    break;
                case "Mady":
                    Console.WriteLine("Mady");
                    this.predyspozycje["Pszenica"] = 0.8;
                    this.predyspozycje["Kukurydza"] = 1.1;
                    this.predyspozycje["Burak"] = 0.5;
                    this.predyspozycje["Ziemniak"] = 0.6;
                    this.predyspozycje["Rzepak"] = 1.1;
                    this.predyspozycje["Zyto"] = 0.9;
                    this.predyspozycje["Jeczmien"] = 1.0;
                    this.predyspozycje["Cebula"] = 0.5;
                    this.predyspozycje["Pietruszka"] = 0.8;
                    this.predyspozycje["Marchew"] = 0.8;
                    break;
                case "Redziny":
                    Console.WriteLine("Redziny");
                    this.predyspozycje["Pszenica"] = 0.7;
                    this.predyspozycje["Kukurydza"] = 0.7;
                    this.predyspozycje["Burak"] = 0.8;
                    this.predyspozycje["Ziemniak"] = 0.9;
                    this.predyspozycje["Rzepak"] = 1.5;
                    this.predyspozycje["Zyto"] = 1.3;
                    this.predyspozycje["Cebula"] = 0.6;
                    this.predyspozycje["Pietruszka"] = 0.8;
                    this.predyspozycje["Marchew"] = 0.8;
                    break;
                case "Piaski":
                    Console.WriteLine("Piaski");
                    this.predyspozycje["Pszenica"] = 0.5;
                    this.predyspozycje["Kukurydza"] = 0.5;
                    this.predyspozycje["Burak"] = 0.5;
                    this.predyspozycje["Ziemniak"] = 0.7;
                    this.predyspozycje["Rzepak"] = 0.6;
                    this.predyspozycje["Zyto"] = 0.95;
                    this.predyspozycje["Jeczmien"] = 0.7;
                    this.predyspozycje["Cebula"] = 0.3;
                    this.predyspozycje["Pietruszka"] = 0.70;
                    this.predyspozycje["Marchew"] = 0.70;
                    break;

            }

            Console.WriteLine("Waga pszenica: {0}", this.predyspozycje["Pszenica"]);
        }

        public String[] liczZyski(DbSet<Rosliny> rosliny)
        {
            String[] tablica = new String[5];
            double wspolczynnik = 0;
            double koszty = 0;
            double przychody = 0;
            double powierzchnia = 0;
            double zysk = 0;
            double maxZysk = 0;
            string maxRoslina = "zadna";
            double kosztyMaxa = 0;
            double przychodyMaxa = 0;

            foreach (var r in rosliny)
            {
                wspolczynnik = 0;
                koszty = 0;
                przychody = 0;
                powierzchnia = 0;

                try
                {
                    wspolczynnik = predyspozycje[r.Gatunki.nazwa];
                }
                catch (KeyNotFoundException)
                {
                    wspolczynnik = 0;
                    continue;
                }

                powierzchnia = (double)Obszary.powierzchniaHa;
                koszty = ((double)r.siewKgHa * (double)r.wartoscKg * 2 + (double)r.kosztOchronyHa + (double)r.koszNawozuHa + (double)r.kosztZbioruHa) * powierzchnia;
                przychody = ((double)r.zbiorKgHa * (double)r.wartoscKg * wspolczynnik + (double)r.doplatyHa) * powierzchnia;
                zysk = przychody - koszty;
                if(zysk > maxZysk)
                {
                    maxZysk = zysk;
                    maxRoslina = r.Gatunki.nazwa;
                    kosztyMaxa = koszty;
                    przychodyMaxa = przychody;
                }
               // Console.WriteLine("Pole: {0} Roœlina: {1} Zysk {2}", idPole, r.Gatunki.nazwa, zysk);
            }

            var keys = new List<string>(predyspozycje.Keys);
            foreach (var key in keys)
            {
                if (key == maxRoslina)
                    predyspozycje[key] *= 0.75;
                else
                    predyspozycje[key] *=  1.1;
            }

            try
            {
                tablica[0] = idPole.ToString();
                tablica[1] = maxRoslina;
                tablica[2] = Convert.ToInt32(przychodyMaxa).ToString();
                tablica[3] = Convert.ToInt32(kosztyMaxa).ToString();
                tablica[4] = Convert.ToInt32(maxZysk).ToString();
            }
            catch (Exception)
            {
                Console.WriteLine("B³ad przy konwerterowaniu Double na Int");
            }

            return tablica;
        }

        public int idPole { get; set; }
        public Nullable<int> idObszar { get; set; }
        public Nullable<int> klasa { get; set; }
        public Nullable<int> idGleba { get; set; }
    
        public virtual Gleby Gleby { get; set; }
        public virtual Obszary Obszary { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Uprawy> Uprawy { get; set; }

        public Dictionary<string, double> predyspozycje { get; set; }
    }
}
